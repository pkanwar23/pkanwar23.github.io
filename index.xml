<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-Level Intermediate Representation Overview on My New Hugo Site</title>
    <link>http://example.org/</link>
    <description>Recent content in Multi-Level Intermediate Representation Overview on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2019 09:01:53 -0800</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FAQ</title>
      <link>http://example.org/faq/</link>
      <pubDate>Tue, 26 Nov 2019 09:01:53 -0800</pubDate>
      
      <guid>http://example.org/faq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>http://example.org/glossary/</link>
      <pubDate>Tue, 26 Nov 2019 09:01:53 -0800</pubDate>
      
      <guid>http://example.org/glossary/</guid>
      <description>This glossary contains definitions of MLIR-specific terminology. It is intended to be a quick reference document. For terms which are well-documented elsewhere, definitions are kept brief and the header links to the more in-depth documentation.
Block A sequential list of operations without control flow.
Also called a basic block.
Conversion The transformation of code represented in one dialect into a semantically equivalent representation in another dialect (i.e. inter-dialect conversion) or the same dialect (i.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://example.org/getting-started/</link>
      <pubDate>Wed, 13 Nov 2019 09:01:53 -0800</pubDate>
      
      <guid>http://example.org/getting-started/</guid>
      <description>The following instructions for compiling and testing MLIR assume that you have git, ninja, and a working C++ toolchain. In the future, we aim to align on the same level of platform support as LLVM. For now, MLIR has been tested on Linux and macOS, with recent versions of clang and with gcc 7.
git clone https://github.com/llvm/llvm-project.git git clone https://github.com/tensorflow/mlir llvm-project/llvm/projects/mlir mkdir llvm-project/build cd llvm-project/build cmake -G Ninja ../llvm -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD=&amp;quot;host&amp;quot; cmake --build .</description>
    </item>
    
  </channel>
</rss>